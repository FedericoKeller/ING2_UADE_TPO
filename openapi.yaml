openapi: 3.1.0
info:
  title: E-commerce Polyglot API
  version: 1.0.0
  description: API para plataforma de comercio electrónico con persistencia poliglota
  contact:
    name: Equipo de Desarrollo
    url: https://github.com/yourusername/ING2_UADE_TPO

servers:
  - url: http://localhost:3000/api
    description: Servidor de desarrollo

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        _id:
          type: string
          format: mongodb-objectid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]
          default: user
        category:
          type: string
          enum: [TOP, MEDIUM, LOW]
          default: LOW
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      required:
        - name
        - description
        - sku
        - category
        - price
        - stock
        - images
      properties:
        _id:
          type: string
          format: mongodb-objectid
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        category:
          type: string
        price:
          type: number
          minimum: 0
        stock:
          type: integer
          minimum: 0
          default: 0
        images:
          type: array
          items:
            type: string
        specifications:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartItem:
      type: object
      required:
        - productId
        - quantity
        - price
        - name
      properties:
        productId:
          type: string
          format: mongodb-objectid
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          minimum: 0
        name:
          type: string

    Cart:
      type: object
      required:
        - userId
        - items
        - total
      properties:
        userId:
          type: string
          format: mongodb-objectid
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      required:
        - product
        - quantity
        - price
      properties:
        product:
          type: string
          format: mongodb-objectid
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          minimum: 0

    ShippingAddress:
      type: object
      required:
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        country:
          type: string

    PaymentInfo:
      type: object
      required:
        - method
        - transactionId
      properties:
        method:
          type: string
          enum: [credit_card, debit_card, transfer]
        transactionId:
          type: string
        status:
          type: string
          enum: [pending, completed, failed]
          default: pending

    Order:
      type: object
      required:
        - user
        - items
        - total
        - shippingAddress
        - paymentInfo
      properties:
        _id:
          type: string
          format: mongodb-objectid
        user:
          type: string
          format: mongodb-objectid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total:
          type: number
          minimum: 0
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          default: pending
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PriceHistory:
      type: object
      required:
        - productId
        - price
        - timestamp
      properties:
        productId:
          type: string
          format: mongodb-objectid
        price:
          type: number
          minimum: 0
        timestamp:
          type: string
          format: date-time
        currency:
          type: string
          default: USD

    ProductChange:
      type: object
      required:
        - productId
        - changeType
        - timestamp
      properties:
        productId:
          type: string
          format: mongodb-objectid
        changeType:
          type: string
          enum: [create, update, delete]
        oldValue:
          type: string
        newValue:
          type: string
        timestamp:
          type: string
          format: date-time

    OrderAnalytics:
      type: object
      properties:
        totalOrders:
          type: integer
        totalRevenue:
          type: number
        averageOrderValue:
          type: number
        ordersByStatus:
          type: object
          additionalProperties:
            type: integer
        period:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time

    ProductAnalytics:
      type: object
      properties:
        averagePrice:
          type: number
        volatility:
          type: object
          properties:
            changes:
              type: integer
            volatility:
              type: number
        period:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time

    ProductRecommendation:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: mongodb-objectid
          description: ID del producto recomendado
        name:
          type: string
          description: Nombre del producto recomendado

    SimilarUser:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - commonInteractions
      properties:
        id:
          type: string
          format: mongodb-objectid
          description: ID del usuario similar
        email:
          type: string
          format: email
          description: Email del usuario similar
        firstName:
          type: string
          description: Nombre del usuario similar
        lastName:
          type: string
          description: Apellido del usuario similar
        commonInteractions:
          type: integer
          description: Número de interacciones en común
          minimum: 0

    UserProfile:
      type: object
      required:
        - user
        - recommendations
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: mongodb-objectid
            email:
              type: string
              format: email
            firstName:
              type: string
            lastName:
              type: string
            category:
              type: string
              enum: [TOP, MEDIUM, LOW]
        recommendations:
          type: object
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/ProductRecommendation'
              description: Lista de productos recomendados
            similarUsers:
              type: array
              items:
                $ref: '#/components/schemas/SimilarUser'
              description: Lista de usuarios con intereses similares

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Registrar un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Datos inválidos o email ya registrado

  /auth/login:
    post:
      tags: [Auth]
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Credenciales inválidas

  /auth/logout:
    post:
      tags: [Auth]
      summary: Cerrar sesión
      security:
        - BearerAuth: []
      responses:
        200:
          description: Sesión cerrada exitosamente
        401:
          description: No autorizado

  /auth/profile:
    get:
      summary: Obtener perfil del usuario y recomendaciones
      tags: [Auth]
      security:
        - BearerAuth: []
      responses:
        200:
          description: Perfil del usuario con recomendaciones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        401:
          description: No autorizado
        404:
          description: Usuario no encontrado

  /products:
    get:
      tags: [Products]
      summary: Listar productos
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
      responses:
        200:
          description: Lista paginada de productos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  hasMore:
                    type: boolean

    post:
      tags: [Products]
      summary: Crear un nuevo producto
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        401:
          description: No autorizado
        403:
          description: No tiene permisos de administrador

  /products/{id}:
    get:
      tags: [Products]
      summary: Obtener detalles de un producto
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalles del producto
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
                  priceHistory:
                    type: array
                    items:
                      $ref: '#/components/schemas/PriceHistory'
                  changes:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductChange'
        404:
          description: Producto no encontrado

    put:
      tags: [Products]
      summary: Actualizar un producto
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        401:
          description: No autorizado
        403:
          description: No tiene permisos de administrador
        404:
          description: Producto no encontrado

    delete:
      tags: [Products]
      summary: Eliminar un producto
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Producto eliminado exitosamente
        401:
          description: No autorizado
        403:
          description: No tiene permisos de administrador
        404:
          description: Producto no encontrado

  /products/{id}/analytics:
    get:
      tags: [Products]
      summary: Obtener análisis de precios de un producto
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Análisis de precios del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAnalytics'
        401:
          description: No autorizado
        403:
          description: No tiene permisos de administrador
        404:
          description: Producto no encontrado

  /cart:
    get:
      tags: [Cart]
      summary: Obtener el carrito actual
      security:
        - BearerAuth: []
      responses:
        200:
          description: Carrito actual
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        401:
          description: No autorizado

    delete:
      tags: [Cart]
      summary: Vaciar el carrito
      security:
        - BearerAuth: []
      responses:
        200:
          description: Carrito vaciado exitosamente
        401:
          description: No autorizado

  /cart/add:
    post:
      tags: [Cart]
      summary: Agregar un producto al carrito
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                  minimum: 1
      responses:
        200:
          description: Producto agregado al carrito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Datos inválidos o stock insuficiente
        401:
          description: No autorizado
        404:
          description: Producto no encontrado

  /cart/{productId}:
    delete:
      tags: [Cart]
      summary: Eliminar un producto del carrito
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Producto eliminado del carrito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        401:
          description: No autorizado
        404:
          description: Carrito o producto no encontrado

  /cart/history:
    get:
      tags: [Cart]
      summary: Obtener historial del carrito
      security:
        - BearerAuth: []
      responses:
        200:
          description: Historial del carrito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        401:
          description: No autorizado

  /cart/revert/{stateIndex}:
    post:
      tags: [Cart]
      summary: Revertir el carrito a un estado anterior
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: stateIndex
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: Carrito revertido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        401:
          description: No autorizado
        404:
          description: Estado no encontrado

  /orders:
    get:
      tags: [Orders]
      summary: Listar pedidos
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        200:
          description: Lista paginada de pedidos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  hasMore:
                    type: boolean
        401:
          description: No autorizado

    post:
      tags: [Orders]
      summary: Crear un nuevo pedido
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shippingAddress
                - paymentInfo
              properties:
                shippingAddress:
                  $ref: '#/components/schemas/ShippingAddress'
                paymentInfo:
                  $ref: '#/components/schemas/PaymentInfo'
      responses:
        201:
          description: Pedido creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Datos inválidos o carrito vacío
        401:
          description: No autorizado

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Obtener detalles de un pedido
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalles del pedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: No autorizado
        403:
          description: No tiene permisos para ver este pedido
        404:
          description: Pedido no encontrado

  /orders/{id}/status:
    patch:
      tags: [Orders]
      summary: Actualizar estado de un pedido
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        200:
          description: Estado actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Estado inválido
        401:
          description: No autorizado
        403:
          description: No tiene permisos de administrador
        404:
          description: Pedido no encontrado

  /orders/{id}/payment:
    patch:
      tags: [Orders]
      summary: Actualizar estado de pago de un pedido
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, completed, failed]
      responses:
        200:
          description: Estado de pago actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Estado inválido
        401:
          description: No autorizado
        403:
          description: No tiene permisos de administrador
        404:
          description: Pedido no encontrado

  /orders/analytics:
    get:
      tags: [Orders]
      summary: Obtener análisis de pedidos
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Análisis de pedidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderAnalytics'
        401:
          description: No autorizado
        403:
          description: No tiene permisos de administrador 
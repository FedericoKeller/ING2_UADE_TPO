version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/ecommerce
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_LOCAL_DC=datacenter1
      - CASSANDRA_KEYSPACE=ecommerce
      - CASSANDRA_USER=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - JWT_SECRET=your-super-secret-key-change-this-in-production
      - JWT_EXPIRES_IN=24h
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      cassandra-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  healthcheck-monitor:
    image: alpine/curl
    depends_on:
      app:
        condition: service_healthy
    command: >
      sh -c 'while true; do
        curl -f http://app:3000/health || echo "Health check failed!";
        sleep 30;
      done'
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1;"]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:latest
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=ecommerce_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_USER=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=128M
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    command: ["cassandra", "-f"]

  cassandra-init:
    image: cassandra:latest
    depends_on:
      cassandra:
        condition: service_healthy
    volumes:
      - ./init-scripts:/init-scripts
    command: >
      sh -c "
        echo 'Waiting for Cassandra to be ready...' &&
        sleep 30 &&
        until cqlsh cassandra -u cassandra -p cassandra -e 'describe keyspaces;' > /dev/null 2>&1; do
          echo 'Waiting for Cassandra...' &&
          sleep 5;
        done &&
        echo 'Initializing Cassandra...' &&
        cqlsh cassandra -u cassandra -p cassandra -f /init-scripts/init.cql &&
        echo 'Cassandra initialization completed successfully'"

volumes:
  mongodb_data:
  redis_data:
  neo4j_data:
  cassandra_data: 